plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

def VERSION_NAME = "0.0.1-SNAPSHOT"
//仓库名称，如果是空则为四级包名
def REPOSITORY_ARTIFACT_ID = "ShapeView"

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "VERSION_NAME", "\"" + VERSION_NAME + "\"")
        buildConfigField("String", "BUILD_TIME", "\"" + new Date() + "\"")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
}

apply plugin: 'maven-publish'

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {

    publications {
        tools(MavenPublication) {
            artifact(sourceJar)
            artifact("$projectDir/build/outputs/aar/$project.name-debug.aar")//指定源码
            groupId = getThreePackage()
            artifactId = getArtifactId()
            version = VERSION_NAME
        }
    }

    repositories {
        maven {
            url = 'https://mijukeji-maven.pkg.coding.net/repository/jileiku/base_maven/'
            credentials {
                username = repositoryUserName
                password = repositoryPassword
            }
        }
    }
}

/**
 * 获取模块3级包名，如：com.foundation.widget
 */
String getThreePackage() {
    try {
        def javaFile = new File(projectDir, "src\\main\\java")
        if (javaFile.exists()) {
            def child = javaFile.listFiles()[0].listFiles()[0].listFiles()[0]
            //先删掉前段路径，然后转为.
            return child.absolutePath.substring(javaFile.absolutePath.length() + 1)
                    .replace("/", ".").replace("\\", ".")
        }
    } catch (e) {
        e.printStackTrace()
    }
    return "com.foundation.$project.name"
}

/**
 * 上传库时的名字
 */
String getArtifactId() {
    String id = REPOSITORY_ARTIFACT_ID
    if (id != null && id.length() > 0) {
        return id;
    }
    try {
        def javaFile = new File(projectDir, "src\\main\\java")
        if (javaFile.exists()) {
            def name = javaFile.listFiles()[0].listFiles()[0].listFiles()[0].listFiles()[0].name
            //第四级的名字，首字母大写
            return name[0].toUpperCase() + name.substring(1, name.length())
        }
    } catch (e) {
        e.printStackTrace()
    }
    throw new RuntimeException("没有找到第四级包名")
}